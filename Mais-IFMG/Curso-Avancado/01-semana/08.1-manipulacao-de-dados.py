# Texto base
s = "Python √© uma linguagem poderosa e vers√°til."

# 1. s.find(subtexto, ini, fim)
#  A. subtexto (obrigat√≥rio): A substring que voc√™ deseja localizar.
#  B. ini (opcional): O √≠ndice inicial onde a busca deve come√ßar. O padr√£o √© 0.
#  C. fim (opcional): O √≠ndice final onde a busca deve terminar (n√£o inclusivo). O padr√£o √© o comprimento da string.

# Procurando a palavra "linguagem" entre as posi√ß√µes 10 e 40
posicao = s.find("linguagem", 10, 40)
print(f"Posi√ß√£o de 'linguagem' entre 10 e 40: {posicao}")

# Retorna o √≠ndice da primeira ocorr√™ncia de subtexto dentro do intervalo especificado (ini at√© fim).
# Retorna -1 se a substring n√£o for encontrada.

# ----------------------------------------------------------------------------------------------------------

# 2. s.format(x1, ..., xn)
# √© usado para formatar strings substituindo espa√ßos reservados na string pelos valores fornecidos como argumentos ().
#  A. Espa√ßos reservados: os espa√ßos reservados na cadeia de caracteres s√£o indicados por chaves.{}
#  B. Argumentos posicionais: Voc√™ pode usar , , etc., para se referir √† posi√ß√£o dos argumentos.{0}{1}
#  C. Argumentos de palavra-chave: voc√™ pode usar espa√ßos reservados nomeados como e passar valores usando argumentos de palavra-chave.{name}
#  D. Op√ß√µes de formata√ß√£o: Voc√™ pode especificar op√ß√µes de formata√ß√£o (por exemplo, alinhamento, largura, precis√£o) dentro dos espa√ßos reservados.

# A. Uso b√°sico - Usando format para inserir valores em uma string:
nome = "Maicon"
curso = "An√°lise e Desenvolvimento de Sistemas"
mensagem = "Ol√°, {}! Bem-vindo ao curso de {}.".format(nome, curso)
print(mensagem)

# Mais utilizado
print(f"Ol√°, {nome}! Bem-vindo ao curso de {curso}.")

# B. Argumentos posicionais: 
mensagem = "Os numero s√£o {0} e {1}.".format(10, 20)
print(mensagem)

# C. Argumentos de palavras-chave:
mensagem = "A capital da {pa√≠s} √© {capital}.".format(pa√≠s="Fran√ßa", capital="Paris")
print(mensagem)

# D. Formata√ß√£o de n√∫meros:
pi = 3.14159
mensagem = "O valor de pi √© aproximadamente {:.2f}.".format(pi)
print(mensagem)

# E+. Alinhamento e largura:
mensagem = "|{:<10}|{:^10}|{:>10}|".format("left", "center", "right")
print(mensagem)

# <: Alinhar √† esquerda
# ^: Alinhamento central
# >: Alinhar √† direita

# ----------------------------------------------------------------------------------------------------------

# 3. s.lower()
# Convertendo todas as letras para min√∫sculas
minusculo = s.lower()
print(f"Texto em min√∫sculas: {minusculo}")

# ----------------------------------------------------------------------------------------------------------

# 4. s.upper()
# Convertendo todas as letras para mai√∫sculas
minusculo = s.upper()
print(f"Texto em mai√∫sculas: {minusculo}")

# ----------------------------------------------------------------------------------------------------------

# 5. s.replace(antigo, novo, n)
# Substituindo "Python" por "Java" apenas na primeira ocorr√™ncia
substituido = s.replace("Python", "Java", 1)
print(f"Texto com substitui√ß√£o: {substituido}")

# ----------------------------------------------------------------------------------------------------------


'''
Lista de v√°rias fun√ß√µes e m√©todos √∫teis para manipula√ß√£o de strings em Python:

------------------------------------------------------------------------------------------------------------

### üîç Busca e verifica√ß√£o
- s.find(sub, start, end) ‚Äì Retorna o √≠ndice da primeira ocorr√™ncia de sub; -1 se n√£o encontrar. x
- s.index(sub, start, end) ‚Äì Igual ao find, mas gera erro se n√£o encontrar.
- s.startswith(prefix) ‚Äì Verifica se a string come√ßa com prefix.
- s.endswith(suffix) ‚Äì Verifica se a string termina com suffix.
- sub in s ‚Äì Verifica se sub est√° contido em s.

------------------------------------------------------------------------------------------------------------

### üî§ Transforma√ß√µes de texto
- s.lower() ‚Äì Converte todas as letras para min√∫sculas. x
- s.upper() ‚Äì Converte todas as letras para mai√∫sculas. x
- s.title() ‚Äì Converte para formato de t√≠tulo (primeira letra mai√∫scula de cada palavra).
- s.capitalize() ‚Äì Apenas a primeira letra da string em mai√∫scula.
- s.swapcase() ‚Äì Inverte mai√∫sculas e min√∫sculas.

------------------------------------------------------------------------------------------------------------

### ‚úÇÔ∏è Remo√ß√£o e substitui√ß√£o
- s.strip() ‚Äì Remove espa√ßos em branco do in√≠cio e fim.
- s.lstrip() ‚Äì Remove espa√ßos do in√≠cio.
- s.rstrip() ‚Äì Remove espa√ßos do fim.
- s.replace(old, new, count) ‚Äì Substitui old por new, at√© count vezes. x

------------------------------------------------------------------------------------------------------------

### üß© Divis√£o e jun√ß√£o
- s.split(sep, maxsplit) ‚Äì Divide a string em uma lista usando sep.
- s.rsplit(sep, maxsplit) ‚Äì Divide a partir da direita.
- s.splitlines() ‚Äì Divide a string em linhas.
- 'sep'.join(lista) ‚Äì Junta os elementos da lista com o separador sep.

------------------------------------------------------------------------------------------------------------

### üî¢ Formata√ß√£o
- s.format(x1, x2, ...) ‚Äì Insere valores formatados na string. x
- f"texto {variavel:.2f}" ‚Äì Formata√ß√£o moderna com f-strings. x
- s.zfill(width) ‚Äì Preenche com zeros √† esquerda at√© atingir width.

------------------------------------------------------------------------------------------------------------

### üß† Informa√ß√µes sobre a string
- len(s) ‚Äì Retorna o comprimento da string.
- s.count(sub) ‚Äì Conta quantas vezes sub aparece.
- s.isalpha() ‚Äì Verifica se todos os caracteres s√£o letras.
- s.isdigit() ‚Äì Verifica se todos os caracteres s√£o d√≠gitos.
- s.isalnum() ‚Äì Verifica se s√£o letras ou n√∫meros.
- s.isspace() ‚Äì Verifica se s√£o apenas espa√ßos.
- s.islower() / s.isupper() ‚Äì Verifica se est√° todo em min√∫sculas ou mai√∫sculas.
------------------------------------------------------------------------------------------------------------
'''
